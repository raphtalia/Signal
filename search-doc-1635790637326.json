[{"title":"Connection","type":0,"sectionRef":"#","url":"api/Connection","content":"","keywords":""},{"title":"Properties","type":1,"pageTitle":"Connection","url":"api/Connection#properties","content":" "},{"title":"Connected","type":1,"pageTitle":"Connection","url":"api/Connection#Connected","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; Connection.Connected: boolean If the connection to the signal is still alive. "},{"title":"Functions","type":1,"pageTitle":"Connection","url":"api/Connection#functions","content":" "},{"title":"Disconnect","type":1,"pageTitle":"Connection","url":"api/Connection#Disconnect","content":"&lt;/&gt; Connection:Disconnect() → () Disconnects the connection from its signal. "},{"title":"Signal","type":0,"sectionRef":"#","url":"api/Signal","content":"","keywords":""},{"title":"Properties","type":1,"pageTitle":"Signal","url":"api/Signal#properties","content":" "},{"title":"Deferred","type":1,"pageTitle":"Signal","url":"api/Signal#Deferred","content":"&lt;/&gt; Signal.Deferred: boolean If callbacks should be called using task.defer() instead of task.spawn(). This property defaults to false. "},{"title":"Functions","type":1,"pageTitle":"Signal","url":"api/Signal#functions","content":" "},{"title":"new","type":1,"pageTitle":"Signal","url":"api/Signal#new","content":"&lt;/&gt; Signal.new() → () Creates a new signal.  "},{"title":"Connect","type":1,"pageTitle":"Signal","url":"api/Signal#Connect","content":"&lt;/&gt; Signal:Connect( callback: function-- The function to call back when the signal is ) → Connection Creates a new connection on the signal. fired.  "},{"title":"DisconnectAll","type":1,"pageTitle":"Signal","url":"api/Signal#DisconnectAll","content":"&lt;/&gt; Signal:DisconnectAll() → () Disconnects all connections from the signal.  "},{"title":"Fire","type":1,"pageTitle":"Signal","url":"api/Signal#Fire","content":"&lt;/&gt; Signal:Fire(...: any) → () Fires the signal with the given arguments.  "},{"title":"Wait","type":1,"pageTitle":"Signal","url":"api/Signal#Wait","content":"This is a yielding function. When called, it will pause the Lua thread that called the function until a result is ready to be returned, without interrupting other scripts. Yields &lt;/&gt; Signal:Wait() → ... Yields the thread until the signal is fired and returns the arguments the signal was fired with. "}]